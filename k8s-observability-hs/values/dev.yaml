# Development environment values for Kubernetes Observability Stack
# This file contains configurations for all components in the observability stack

# Global settings
global:
  environment: "dev-hs"
  clusterName: "dev-cluster-hs"

# Prometheus Configuration
prometheus:
  prometheusSpec:
    retention: "15d"
    scrapeInterval: "30s"
    evaluationInterval: "30s"
    
    # Storage configuration
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "standard"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    
    # Resource limits
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 200m
    
    # Service monitor configuration
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}

  # Disable built-in alertmanager (using separate release)
  alertmanager:
    enabled: false

# Grafana Configuration
grafana:
  adminPassword: "admin123"  # Change in production
  persistence:
    enabled: true
    storageClassName: "standard"
    size: 5Gi
  
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default

  dashboards:
    default:
      kubernetes-cluster:
        gnetId: 7249
        revision: 1
        datasource: Prometheus
      kubernetes-pods:
        gnetId: 6417
        revision: 1
        datasource: Prometheus

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server.monitoring.svc.cluster.local
          access: proxy
          isDefault: true
        - name: Loki
          type: loki
          url: http://loki.monitoring.svc.cluster.local
          access: proxy

# Loki Configuration
loki:
  loki:
    auth_enabled: false
    commonConfig:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        kvstore:
          store: inmemory
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb_shipper:
        active_index_directory: /loki/boltdb-shipper-active
        cache_location: /loki/boltdb-shipper-cache
        cache_ttl: 24h
        shared_store: filesystem
      filesystem:
        directory: /loki/chunks

  persistence:
    enabled: true
    storageClassName: "standard"
    size: 10Gi

  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: 200m

# Alertmanager Configuration
alertmanager:
  alertmanagerSpec:
    retention: "120h"
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: "standard"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
      limits:
        memory: 256Mi
        cpu: 200m

  config:
    global:
      resolve_timeout: 5m
      slack_api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
    
    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'slack-notifications'
      routes:
        - match:
            severity: critical
          receiver: 'slack-critical'
          continue: true
    
    receivers:
      - name: 'slack-notifications'
        slack_configs:
          - channel: '#alerts'
            send_resolved: true
      - name: 'slack-critical'
        slack_configs:
          - channel: '#critical-alerts'
            send_resolved: true

# Alloy Configuration (Custom component)
alloy:
  enabled: true
  
  image:
    repository: your-registry/alloy
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
  
  service:
    type: ClusterIP
    port: 8080
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: alloy.local
        paths:
          - path: /
            pathType: Prefix
  
  config:
    logLevel: "info"
    metricsEnabled: true
    tracingEnabled: false

# Node Exporter (for node metrics)
nodeExporter:
  enabled: true
  
  resources:
    requests:
      memory: 64Mi
      cpu: 50m
    limits:
      memory: 128Mi
      cpu: 100m

# Kube State Metrics (for Kubernetes object metrics)
kubeStateMetrics:
  enabled: true
  
  resources:
    requests:
      memory: 64Mi
      cpu: 50m
    limits:
      memory: 128Mi
      cpu: 100m

# Service Monitor for self-monitoring
serviceMonitor:
  enabled: true
  interval: 30s 